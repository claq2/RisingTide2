/*
line-chart - v1.0.6 - 18 May 2014
https://github.com/n3-charts/line-chart
Copyright (c) 2014 n3-charts
*/
var directive, m, mod, old_m; old_m = angular.module("n3-charts.linechart", ["n3charts.utils"]), m = angular.module("n3-line-chart", ["n3charts.utils"]), directive = function (a, b) { return old_m.directive(a, b), m.directive(a, b) }, directive("linechart", ["n3utils", "$window", "$timeout", function (a, b, c) { var d; return d = function (d, e, f) { var g, h, i, j, k; return g = a.getDefaultMargins(), d.updateDimensions = function (b) { var c, d, f, g; return g = a.getPixelCssProp(e[0].parentElement, "padding-top"), c = a.getPixelCssProp(e[0].parentElement, "padding-bottom"), d = a.getPixelCssProp(e[0].parentElement, "padding-left"), f = a.getPixelCssProp(e[0].parentElement, "padding-right"), b.width = (e[0].parentElement.offsetWidth || 900) - d - f, b.height = (e[0].parentElement.offsetHeight || 500) - g - c }, d.update = function () { return d.updateDimensions(g), d.redraw(g) }, i = !1, h = { onSeriesVisibilityChange: function (a) { var b, c, e; return e = a.series, b = a.index, c = a.newVisibility, i = !0, d.options.series[b].visible = c, d.$apply(), i = !1 } }, d.redraw = function (b) { var c, g, i, j, k, l, m, n; return l = a.sanitizeOptions(angular.copy(d.options)), i = d.data, m = l.series, j = a.getDataPerSeries(i, l), k = "thumbnail" === f.mode, a.clean(e[0]), n = a.bootstrap(e[0], b), c = a.createAxes(n, b, l.axes).andAddThemIf(k), j.length && a.setScalesDomain(c, i, l.series, n, l.axes), k ? a.adjustMarginsForThumbnail(b, c) : a.adjustMargins(b, l, i), a.createContent(n), k || a.drawLegend(n, m, b, h), j.length && (g = a.getBestColumnWidth(b, j), a.drawArea(n, c, j, l).drawColumns(n, c, j, g).drawLines(n, c, j, l), k || a.drawDots(n, c, j)), k ? void 0 : a.addTooltips(n, b, l.axes) }, j = void 0, k = function () { return c.cancel(j), j = c(d.update, 1) }, b.addEventListener("resize", k), d.$watch("data", d.update), d.$watch("options", function () { return i ? void 0 : d.update() }, !0) }, { replace: !0, restrict: "E", scope: { data: "=", options: "=" }, template: "<div></div>", link: d } }]), mod = angular.module("n3charts.utils", []), mod.factory("n3utils", ["$window", "$log", "$rootScope", function (a, b) { return { addPattern: function (a, b) { var c; return c = a.select("defs").append("pattern").attr({ id: b.type + "Pattern_" + b.index, patternUnits: "userSpaceOnUse", x: 0, y: 0, width: 60, height: 60 }).append("g").style({ fill: b.color, "fill-opacity": .3 }), c.append("rect").style("fill-opacity", .3).attr("width", 60).attr("height", 60), c.append("path").attr("d", "M 10 0 l10 0 l -20 20 l 0 -10 z"), c.append("path").attr("d", "M40 0 l10 0 l-50 50 l0 -10 z"), c.append("path").attr("d", "M60 10 l0 10 l-40 40 l-10 0 z"), c.append("path").attr("d", "M60 40 l0 10 l-10 10 l -10 0 z") }, drawArea: function (a, b, c, d) { var e, f; return e = c.filter(function (a) { return "area" === a.type }), e.forEach(function (b) { return this.addPattern(a, b) }, this), f = { y: this.createLeftAreaDrawer(b, d.lineMode, d.tension), y2: this.createRightAreaDrawer(b, d.lineMode, d.tension) }, a.select(".content").selectAll(".areaGroup").data(e).enter().append("g").attr("class", function (a) { return "areaGroup series_" + a.index }).append("path").attr("class", "area").style("fill", function (a) { return a.striped !== !0 ? a.color : "url(#areaPattern_" + a.index + ")" }).style("opacity", function (a) { return a.striped ? "1" : "0.3" }).attr("d", function (a) { return f[a.axis](a.values) }), this }, createLeftAreaDrawer: function (a, b, c) { return d3.svg.area().x(function (b) { return a.xScale(b.x) }).y0(function () { return a.yScale(0) }).y1(function (b) { return a.yScale(b.value) }).interpolate(b).tension(c) }, createRightAreaDrawer: function (a, b, c) { return d3.svg.area().x(function (b) { return a.xScale(b.x) }).y0(function () { return a.y2Scale(0) }).y1(function (b) { return a.y2Scale(b.value) }).interpolate(b).tension(c) }, getBestColumnWidth: function (a, b) { var c, d, e, f; return b && 0 !== b.length ? (e = b[0].values.length + 2, f = b.length, d = 0, c = a.width - a.left - a.right, parseInt(Math.max((c - (e - 1) * d) / (e * f), 5))) : 10 }, drawColumns: function (a, b, c, d) { var e, f, g; return c = c.filter(function (a) { return "column" === a.type }), g = d3.scale.ordinal().domain(c.map(function (a) { return a.name + a.index })).rangeBands([0, c.length * d], 0), f = this, e = a.select(".content").selectAll(".columnGroup").data(c).enter().append("g").attr("class", function (a) { return "columnGroup series_" + a.index }).style("fill", function (a) { return a.color }).style("fill-opacity", .8).attr("transform", function (a) { return "translate(" + (g(a.name + a.index) - c.length * d / 2) + ",0)" }).on("mouseover", function (c) { var d; return d = d3.select(d3.event.target), f.onMouseOver(a, { series: c, x: d.attr("x"), y: b[c.axis + "Scale"](d.datum().value), datum: d.datum() }) }).on("mouseout", function () { return d3.select(d3.event.target).attr("r", 2), f.onMouseOut(a) }), e.selectAll("rect").data(function (a) { return a.values }).enter().append("rect").style("fill-opacity", function (a) { return 0 === a.value ? 0 : 1 }).attr({ width: d, x: function (a) { return b.xScale(a.x) }, height: function (a) { return 0 === a.value ? b[a.axis + "Scale"].range()[0] : Math.abs(b[a.axis + "Scale"](a.value) - b[a.axis + "Scale"](0)) }, y: function (a) { return 0 === a.value ? 0 : b[a.axis + "Scale"](Math.max(0, a.value)) } }), this }, updateColumns: function (a, b, c) { return a.select(".content").selectAll(".columnGroup").selectAll("rect").attr({ width: c, x: function (a) { return b.xScale(a.x) }, y: function (a) { return b[a.axis + "Scale"](Math.max(0, a.value)) }, height: function (a) { return Math.abs(b[a.axis + "Scale"](a.value) - b[a.axis + "Scale"](0)) } }), this }, drawDots: function (a, b, c) { var d; return d = this, a.select(".content").selectAll(".dotGroup").data(c.filter(function (a) { var b; return "line" === (b = a.type) || "area" === b })).enter().append("g").attr({ "class": function (a) { return "dotGroup series_" + a.index }, fill: function (a) { return a.color } }).on("mouseover", function (b) { var c; return c = d3.select(d3.event.target), c.attr("r", 4), d.onMouseOver(a, { series: b, x: c.attr("cx"), y: c.attr("cy"), datum: c.datum() }) }).on("mouseout", function () { return d3.select(d3.event.target).attr("r", 2), d.onMouseOut(a) }).selectAll(".dot").data(function (a) { return a.values }).enter().append("circle").attr({ "class": "dot", r: 2, cx: function (a) { return b.xScale(a.x) }, cy: function (a) { return b[a.axis + "Scale"](a.value) } }).style({ stroke: "white", "stroke-width": "2px" }), this }, updateDots: function (a, b) { return a.select(".content").selectAll(".dotGroup").selectAll(".dot").attr({ cx: function (a) { return b.xScale(a.x) }, cy: function (a) { return b[a.axis + "Scale"](a.value) } }), this }, drawLegend: function (a, b, c, d) { var e, f, g, h, i, j, k; for (i = [0], f = 1; f < b.length;) h = b[f - 1].label || b[f - 1].y, i.push(this.getTextWidth(h) + i[f - 1] + 40), f++; return k = this, j = a.append("g").attr("class", "legend"), e = 16, a.select("defs").append("svg:clipPath").attr("id", "legend-clip").append("circle").attr("r", e / 2), g = j.selectAll(".legendItem").data(b).enter().append("g").attr({ "class": "legendItem", transform: function (a, b) { return "translate(" + i[b] + "," + (c.height - 40) + ")" } }), g.on("click", function (b, c) { var e; return e = k.toggleSeries(a, c), d3.select(this).attr("opacity", e ? "1" : "0.2"), "function" == typeof d.onSeriesVisibilityChange ? d.onSeriesVisibilityChange({ series: b, index: c, newVisibility: e }) : void 0 }), g.append("circle").attr({ fill: function (a) { return a.color }, stroke: function (a) { return a.color }, "stroke-width": "2px", r: e / 2 }), g.append("path").attr({ "clip-path": "url(#legend-clip)", "fill-opacity": function (a) { var b; return "area" === (b = a.type) || "column" === b ? "1" : "0" }, fill: "white", stroke: "white", "stroke-width": "2px", d: function (a) { return k.getLegendItemPath(a, e, e) } }), g.append("circle").attr({ "fill-opacity": 0, stroke: function (a) { return a.color }, "stroke-width": "2px", r: e / 2 }), g.append("text").attr({ "font-family": "Courier", "font-size": 10, transform: "translate(13, 4)", "text-rendering": "geometric-precision" }).text(function (a) { return a.label || a.y }), this }, getLegendItemPath: function (a, b, c) { var d, e; return "column" === a.type ? (e = "M-" + b / 3 + " -" + c / 8 + " l0 " + c + " ", e += "M0 -" + c / 3 + " l0 " + c + " ", e += "M" + b / 3 + " -" + c / 10 + " l0 " + c + " ") : (d = "M-" + b / 2 + " 0" + c / 3 + " l" + b / 3 + " -" + c / 3 + " l" + b / 3 + " " + c / 3 + " l" + b / 3 + " -" + 2 * c / 3, "area" === a.type, d) }, toggleSeries: function (a, b) { var c; return c = !1, a.select(".content").selectAll(".series_" + b).attr("opacity", function () { return "0" === d3.select(this).attr("opacity") ? (c = !0, "1") : (c = !1, "0") }), c }, drawLines: function (a, b, c, d) { var e; return e = { y: this.createLeftLineDrawer(b, d.lineMode, d.tension), y2: this.createRightLineDrawer(b, d.lineMode, d.tension) }, a.select(".content").selectAll(".lineGroup").data(c.filter(function (a) { var b; return "line" === (b = a.type) || "area" === b })).enter().append("g").style("stroke", function (a) { return a.color }).attr("class", function (a) { return "lineGroup series_" + a.index }).append("path").attr({ "class": "line", d: function (a) { return e[a.axis](a.values) } }).style({ fill: "none", "stroke-width": function (a) { return a.thickness } }), this }, createLeftLineDrawer: function (a, b, c) { return d3.svg.line().x(function (b) { return a.xScale(b.x) }).y(function (b) { return a.yScale(b.value) }).interpolate(b).tension(c) }, createRightLineDrawer: function (a, b, c) { return d3.svg.line().x(function (b) { return a.xScale(b.x) }).y(function (b) { return a.y2Scale(b.value) }).interpolate(b).tension(c) }, getPixelCssProp: function (b, c) { var d; return d = a.getComputedStyle(b, null).getPropertyValue(c), +d.replace(/px$/, "") }, getDefaultMargins: function () { return { top: 20, right: 50, bottom: 60, left: 50 } }, clean: function (a) { return d3.select(a).on("keydown", null).on("keyup", null).select("svg").remove() }, bootstrap: function (a, b) { var c, d, e; return d3.select(a).classed("chart", !0), e = b.width, c = b.height, d = d3.select(a).append("svg").attr({ width: e, height: c }).append("g").attr("transform", "translate(" + b.left + "," + b.top + ")"), d.append("defs").attr("class", "patterns"), d }, createContent: function (a) { return a.append("g").attr("class", "content") }, getDataPerSeries: function (a, b) { var c, d, e; return d = b.series, c = b.axes, d && d.length && a && a.length ? (e = [], d.forEach(function (d) { var f; return f = { xFormatter: c.x.tooltipFormatter, index: e.length, name: d.y, values: [], striped: d.striped === !0 ? !0 : void 0, color: d.color, axis: d.axis || "y", type: d.type, thickness: d.thickness }, a.filter(function (a) { return null != a[d.y] }).forEach(function (a) { return f.values.push({ x: a[b.axes.x.key], value: a[d.y], axis: d.axis || "y" }) }), e.push(f) }), e) : [] }, resetMargins: function (a) { var b; return b = this.getDefaultMargins(), a.left = b.left, a.right = b.right, a.top = b.top, a.bottom = b.bottom }, adjustMargins: function (a, b, c) { var d, e, f, g, h; return this.resetMargins(a), c && c.length && (h = b.series, d = h.filter(function (a) { return "y2" !== a.axis }), e = this.getWidestOrdinate(c, d), a.left = this.getTextWidth("" + e) + 20, f = h.filter(function (a) { return "y2" === a.axis }), f.length) ? (g = this.getWidestOrdinate(c, f), a.right = this.getTextWidth("" + g) + 20) : void 0 }, adjustMarginsForThumbnail: function (a) { return a.top = 1, a.bottom = 2, a.left = 0, a.right = 1 }, getTextWidth: function (a) { return parseInt(5 * a.length) + 10 }, getWidestOrdinate: function (a, b) { var c; return c = "", a.forEach(function (a) { return b.forEach(function (b) { return null != a[b.y] && ("" + a[b.y]).length > ("" + c).length ? c = a[b.y] : void 0 }) }), c }, getDefaultOptions: function () { return { tooltipMode: "default", lineMode: "linear", tension: .7, axes: { x: { type: "linear", key: "x" }, y: { type: "linear" } }, series: [] } }, sanitizeOptions: function (a) { return null == a ? this.getDefaultOptions() : (a.series = this.sanitizeSeriesOptions(a.series), a.axes = this.sanitizeAxes(a.axes, this.haveSecondYAxis(a.series)), a.lineMode || (a.lineMode = "linear"), a.tension = /^\d+(\.\d+)?$/.test(a.tension) ? a.tension : .7, a.tooltipMode || (a.tooltipMode = "default"), a) }, sanitizeSeriesOptions: function (a) { var b; return null == a ? [] : (b = d3.scale.category10(), a.forEach(function (a, c) { var d, e; return a.axis = "y2" !== (null != (d = a.axis) ? d.toLowerCase() : void 0) ? "y" : "y2", a.color || (a.color = b(c)), a.type = "line" === (e = a.type) || "area" === e || "column" === e ? a.type : "line", "column" === a.type ? delete a.thickness : /^\d+px$/.test(a.thickness) ? void 0 : a.thickness = "1px" }), a) }, sanitizeAxes: function (a, b) { var c; return null == a && (a = {}), a.x = this.sanitizeAxisOptions(a.x), (c = a.x).key || (c.key = "x"), a.y = this.sanitizeAxisOptions(a.y), b && (a.y2 = this.sanitizeAxisOptions(a.y2)), this.sanitizeExtrema(a.y), b && this.sanitizeExtrema(a.y2), a }, sanitizeExtrema: function (a) { var b, c; return c = this.getSanitizedExtremum(a.min), null != c ? a.min = c : delete a.min, b = this.getSanitizedExtremum(a.max), null != b ? a.max = b : delete a.max }, getSanitizedExtremum: function (a) { var c; return null == a ? void 0 : (c = parseInt(a, 10), isNaN(c) ? void b.warn("Invalid extremum value : " + a + ", deleting it.") : c) }, sanitizeAxisOptions: function (a) { return null == a ? { type: "linear" } : (a.type || (a.type = "linear"), a) }, createAxes: function (a, b, c) { var d, e, f, g, h, i, j, k, l, m, n, o; return d = null != c.y2, h = b.width, e = b.height, h = h - b.left - b.right, e = e - b.top - b.bottom, i = void 0, i = "date" === c.x.type ? d3.time.scale().rangeRound([0, h]) : d3.scale.linear().rangeRound([0, h]), k = void 0, k = "log" === c.y.type ? d3.scale.log().clamp(!0).rangeRound([e, 0]) : d3.scale.linear().rangeRound([e, 0]), l = void 0, l = d && "log" === c.y2.type ? d3.scale.log().clamp(!0).rangeRound([e, 0]) : d3.scale.linear().rangeRound([e, 0]), j = d3.svg.axis().scale(i).orient("bottom").tickFormat(c.x.labelFunction), n = d3.svg.axis().scale(k).orient("left").tickFormat(c.y.labelFunction), m = d3.svg.axis().scale(l).orient("right").tickFormat(null != (o = c.y2) ? o.labelFunction : void 0), f = function (a) { return a.style({ font: "10px Courier", "shape-rendering": "crispEdges" }), a.selectAll("path").style({ fill: "none", stroke: "#000" }) }, g = this, { xScale: i, yScale: k, y2Scale: l, xAxis: j, yAxis: n, y2Axis: m, andAddThemIf: function (b) { return b || (f(a.append("g").attr("class", "x axis").attr("transform", "translate(0," + e + ")").call(j)), f(a.append("g").attr("class", "y axis").call(n)), d && f(a.append("g").attr("class", "y2 axis").attr("transform", "translate(" + h + ", 0)").call(m))), { xScale: i, yScale: k, y2Scale: l, xAxis: j, yAxis: n, y2Axis: m } } } }, setScalesDomain: function (a, b, c, d, e) { var f, g; return this.setXScale(a.xScale, b, c, e), g = this.getVerticalDomain(e, b, c, "y"), f = this.getVerticalDomain(e, b, c, "y2"), a.yScale.domain(g).nice(), a.y2Scale.domain(f).nice(), d.selectAll(".x.axis").call(a.xAxis), d.selectAll(".y.axis").call(a.yAxis), d.selectAll(".y2.axis").call(a.y2Axis) }, getVerticalDomain: function (a, b, c, d) { var e, f; return (f = a[d]) ? (e = this.yExtent(c.filter(function (a) { return a.axis === d }), b), "log" === f.type && (e[0] = 0 === e[0] ? .001 : e[0]), null != f.min && (e[0] = f.min), null != f.max && (e[1] = f.max), e) : [] }, yExtent: function (a, b) { var c, d; return d = Number.POSITIVE_INFINITY, c = Number.NEGATIVE_INFINITY, a.forEach(function (a) { return d = Math.min(d, d3.min(b, function (b) { return b[a.y] })), c = Math.max(c, d3.max(b, function (b) { return b[a.y] })) }), d === c ? d > 0 ? [0, 2 * d] : [2 * d, 0] : [d, c] }, setXScale: function (a, b, c, d) { return a.domain(this.xExtent(b, d.x.key)), c.filter(function (a) { return "column" === a.type }).length ? this.adjustXScaleForColumns(a, b, d.x.key) : void 0 }, xExtent: function (a, b) { var c, d, e; return e = d3.extent(a, function (a) { return a[b] }), c = e[0], d = e[1], c === d ? c > 0 ? [0, 2 * c] : [2 * c, 0] : [c, d] }, adjustXScaleForColumns: function (a, b, c) { var d, e; return e = this.getAverageStep(b, c), d = a.domain(), a.domain(angular.isDate(d[0]) ? [new Date(d[0].getTime() - e), new Date(d[1].getTime() + e)] : [d[0] - e, d[1] + e]) }, getAverageStep: function (a, b) { var c, d, e; if (!(a.length > 1)) return 0; for (e = 0, d = a.length - 1, c = 0; d > c;) e += a[c + 1][b] - a[c][b], c++; return e / d }, haveSecondYAxis: function (a) { return !a.every(function (a) { return "y2" !== a.axis }) }, addTooltips: function (a, b, c) { var d, e, f, g, h, i, j, k; return h = b.width, e = b.height, h = h - b.left - b.right, e = e - b.top - b.bottom, g = 24, d = 18, f = 5, i = a.append("g").attr({ id: "xTooltip", "class": "xTooltip", opacity: 0 }), i.append("path").attr("transform", "translate(0," + (e + 1) + ")"), i.append("text").style("text-anchor", "middle").attr({ width: g, height: d, "font-family": "monospace", "font-size": 10, transform: "translate(0," + (e + 19) + ")", fill: "white", "text-rendering": "geometric-precision" }), k = a.append("g").attr({ id: "yTooltip", "class": "yTooltip", opacity: 0 }), k.append("path"), k.append("text").attr({ width: d, height: g, "font-family": "monospace", "font-size": 10, fill: "white", "text-rendering": "geometric-precision" }), null != c.y2 ? (j = a.append("g").attr({ id: "y2Tooltip", "class": "y2Tooltip", opacity: 0, transform: "translate(" + h + ",0)" }), j.append("path"), j.append("text").attr({ width: d, height: g, "font-family": "monospace", "font-size": 10, fill: "white", "text-rendering": "geometric-precision" })) : void 0 }, onMouseOver: function (a, b) { return this.updateXTooltip(a, b), "y2" === b.series.axis ? this.updateY2Tooltip(a, b) : this.updateYTooltip(a, b) }, onMouseOut: function (a) { return this.hideTooltips(a) }, updateXTooltip: function (a, b) { var c, d; return d = a.select("#xTooltip").transition().attr({ opacity: 1, transform: "translate(" + b.x + ",0)" }), c = void 0, c = null != b.series.xFormatter ? "" + b.series.xFormatter(b.datum.x) : "" + b.datum.x, d.select("text").text(c), d.select("path").attr("fill", b.series.color).attr("d", this.getXTooltipPath(c)) }, getXTooltipPath: function (a) { var b, c, d; return d = this.getTextWidth(a), b = 18, c = 5, "m-" + d / 2 + " " + c + " l0 " + b + " l" + d + " 0 l0 -" + b + "l-" + (d / 2 - c) + " 0 l-" + c + " -" + b / 4 + " l-" + c + " " + b / 4 + " l-" + (d / 2 - c) + " 0z" }, updateYTooltip: function (a, b) { var c, d, e, f; return e = a.select("#yTooltip").transition().attr({ opacity: 1, transform: "translate(0, " + b.y + ")" }), c = "" + b.datum.value, d = this.getTextWidth(c), f = e.select("text").text(c), f.attr({ transform: "translate(" + (-d - 2) + ",3)", width: d }), e.select("path").attr("fill", b.series.color).attr("d", this.getYTooltipPath(d)) }, getYTooltipPath: function (a) { var b, c; return b = 18, c = 5, "m0 0l-" + c + " -" + c + " l0 -" + (b / 2 - c) + " l-" + a + " 0 l0 " + b + " l" + a + " 0 l0 -" + (b / 2 - c) + "l-" + c + " " + c + "z" }, updateY2Tooltip: function (a, b) { var c, d, e, f; return e = a.select("#y2Tooltip").transition().attr("opacity", 1), c = "" + b.datum.value, d = this.getTextWidth(c), f = e.select("text").text(c), f.attr({ transform: "translate(7, " + (parseFloat(b.y) + 3) + ")", w: d }), e.select("path").attr({ fill: b.series.color, d: this.getY2TooltipPath(d), transform: "translate(0, " + b.y + ")" }) }, getY2TooltipPath: function (a) { var b, c; return b = 18, c = 5, "m0 0l" + c + " " + c + " l0 " + (b / 2 - c) + " l" + a + " 0 l0 -" + b + " l-" + a + " 0 l0 " + (b / 2 - c) + " l-" + c + " " + c + "z" }, hideTooltips: function (a) { return a.select("#xTooltip").transition().attr("opacity", 0), a.select("#yTooltip").transition().attr("opacity", 0), a.select("#y2Tooltip").transition().attr("opacity", 0) } } }]);